// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protoc/Hello.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HelloWorld_Default_FullMethodName       = "/HelloWorld/Default"
	HelloWorld_ClientStream_FullMethodName  = "/HelloWorld/ClientStream"
	HelloWorld_ServerStream_FullMethodName  = "/HelloWorld/ServerStream"
	HelloWorld_Bidirectional_FullMethodName = "/HelloWorld/Bidirectional"
)

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldClient interface {
	Default(ctx context.Context, in *HelloRequst, opts ...grpc.CallOption) (*HelloResponse, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequst, HelloResponse], error)
	ServerStream(ctx context.Context, in *HelloRequst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequst, HelloResponse], error)
}

type helloWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldClient(cc grpc.ClientConnInterface) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Default(ctx context.Context, in *HelloRequst, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, HelloWorld_Default_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequst, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[0], HelloWorld_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequst, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_ClientStreamClient = grpc.ClientStreamingClient[HelloRequst, HelloResponse]

func (c *helloWorldClient) ServerStream(ctx context.Context, in *HelloRequst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[1], HelloWorld_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequst, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_ServerStreamClient = grpc.ServerStreamingClient[HelloResponse]

func (c *helloWorldClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequst, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[2], HelloWorld_Bidirectional_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequst, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_BidirectionalClient = grpc.BidiStreamingClient[HelloRequst, HelloResponse]

// HelloWorldServer is the server API for HelloWorld service.
// All implementations must embed UnimplementedHelloWorldServer
// for forward compatibility.
type HelloWorldServer interface {
	Default(context.Context, *HelloRequst) (*HelloResponse, error)
	ClientStream(grpc.ClientStreamingServer[HelloRequst, HelloResponse]) error
	ServerStream(*HelloRequst, grpc.ServerStreamingServer[HelloResponse]) error
	Bidirectional(grpc.BidiStreamingServer[HelloRequst, HelloResponse]) error
	mustEmbedUnimplementedHelloWorldServer()
}

// UnimplementedHelloWorldServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloWorldServer struct{}

func (UnimplementedHelloWorldServer) Default(context.Context, *HelloRequst) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Default not implemented")
}
func (UnimplementedHelloWorldServer) ClientStream(grpc.ClientStreamingServer[HelloRequst, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedHelloWorldServer) ServerStream(*HelloRequst, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedHelloWorldServer) Bidirectional(grpc.BidiStreamingServer[HelloRequst, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Bidirectional not implemented")
}
func (UnimplementedHelloWorldServer) mustEmbedUnimplementedHelloWorldServer() {}
func (UnimplementedHelloWorldServer) testEmbeddedByValue()                    {}

// UnsafeHelloWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServer will
// result in compilation errors.
type UnsafeHelloWorldServer interface {
	mustEmbedUnimplementedHelloWorldServer()
}

func RegisterHelloWorldServer(s grpc.ServiceRegistrar, srv HelloWorldServer) {
	// If the following call pancis, it indicates UnimplementedHelloWorldServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HelloWorld_ServiceDesc, srv)
}

func _HelloWorld_Default_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).Default(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloWorld_Default_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).Default(ctx, req.(*HelloRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).ClientStream(&grpc.GenericServerStream[HelloRequst, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_ClientStreamServer = grpc.ClientStreamingServer[HelloRequst, HelloResponse]

func _HelloWorld_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).ServerStream(m, &grpc.GenericServerStream[HelloRequst, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_ServerStreamServer = grpc.ServerStreamingServer[HelloResponse]

func _HelloWorld_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).Bidirectional(&grpc.GenericServerStream[HelloRequst, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloWorld_BidirectionalServer = grpc.BidiStreamingServer[HelloRequst, HelloResponse]

// HelloWorld_ServiceDesc is the grpc.ServiceDesc for HelloWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Default",
			Handler:    _HelloWorld_Default_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _HelloWorld_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _HelloWorld_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Bidirectional",
			Handler:       _HelloWorld_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protoc/Hello.proto",
}
